<?php
/* Generated by neoan3-cli */

namespace Neoan3\Model\User;

use Neoan3\Provider\MySql\Database;
use Neoan3\Provider\Model\Model;
use Neoan3\Provider\MySql\Transform;

/**
 * Class UserModel
 * @package Neoan3\Model\User
 * @method static get(string $id)

 * @method static find(array $conditionArray)
 * @method static delete(string $id, bool $hard = false)
 */
class UserModel implements Model
{

    /**
     * @var Database|null
     */
    private static ?Database $db = null;

    /**
     * @param $method
     * @param $args
     * @return mixed
     */
    public static function __callStatic($method, $args)
    {
        if (!method_exists(self::class, $method)) {
            $transform = new Transform('user', self::$db);
            return $transform->$method(...$args);
        } else {
            return self::$method(...$args);
        }
    }

    public static function update($modelArray): array
    {
        $modelArray['password'] = '=' . password_hash($modelArray['password'], PASSWORD_DEFAULT);
        $t = new Transform('user', self::$db);
        return $t->update($modelArray);
    }
    //this function is called when the user updates the password and returns the updated password to the database

    /**
     * @param array $providers
     */
    public static function init(array $providers)
    {
        foreach ($providers as $key => $provider) {
            if ($key === 'db') {
                self::$db = $provider;
            }
        }
    }

    /**
     * @param array $modelArray
     * @return array
     * @throws \Exception
     */
    static function create($modelArray): array
    {
        $modelArray['password'] = '=' . password_hash($modelArray['password'], PASSWORD_DEFAULT);
        $t = new Transform('user', self::$db);
        return $t->create($modelArray);
        //creates the array and user for the user table and adds the users to the database

    }

    static function login($credentials)
    {
        $find = self::find(['email' => $credentials['email']]);
        if (!empty($find) && password_verify($credentials['password'], $find[0]['password'])) {
            return self::get($find[0]['id']);
        }
        return false;
    }
}